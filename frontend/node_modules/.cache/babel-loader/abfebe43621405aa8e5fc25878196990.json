{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/thori/IdeaProjects/2020_Stormrider_Docker_Test/stormrider_2020/frontend/src/components/ProductList.js\";\nimport React from 'react';\nimport bridle from '../images/products/bridle.png';\nimport horseshoes from '../images/products/horseshoes.jpg';\nimport saddle1 from '../images/products/saddle1.png';\nimport saddle2 from '../images/products/saddle2.jpg';\nimport axios from 'axios';\nimport { CardColumns, Card, Button, Jumbotron } from \"react-bootstrap\"; //  DECLARATION OF GLOBAL LANGUAGE VARIABLE\n//============================================\n\nclass ProductList extends React.Component {\n  //  METHODS FOR RETRIEVING VALUES FROM PATH\n  //=====================================================================================================================\n  getCategoryId() {\n    const categoryId = this.props.match.params.categoryId;\n    return categoryId;\n  }\n\n  getLanguage() {\n    const language = this.props.match.params.language;\n    return language;\n  }\n\n  getImage(link) {\n    switch (link) {\n      case 'bridle.png':\n        return bridle;\n        break;\n\n      case 'horseshoes.jpg':\n        return horseshoes;\n        break;\n\n      case 'saddle1.png':\n        return saddle1;\n        break;\n\n      case 'saddle2.jpg':\n        return saddle2;\n        break;\n\n      default:\n        break;\n    }\n  } //  CONSTRUCTOR\n  //=====================================================================================================================\n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      categories: []\n    };\n  } //  GET REQUEST\n  //=====================================================================================================================\n\n\n  componentDidMount() {\n    axios.get(\"http://localhost:8888/api/category/all\") // the ID needs to be passed from NavBar\n    .then(response => response.data).then(data => {\n      this.setState({\n        categories: data\n      });\n    });\n  } //  RENDER METHODS\n  //=====================================================================================================================\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(CardColumns, {\n      className: \"card-frame\",\n      children: this.state.categories.map(category => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: category.categoryId == this.getCategoryId() ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: category.subcategories.map(subcategory => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: subcategory.productGroups.map(productGroup => /*#__PURE__*/_jsxDEV(Card, {\n              style: {\n                width: '18rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n                variant: \"top\",\n                style: {\n                  height: '20rem'\n                },\n                src: this.getImage(productGroup.productGroupImage.image)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n                children: [productGroup.productGroupLanguages.map(productGroupLanguage => /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: productGroupLanguage.appLanguageCode == this.getLanguage() ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n                      className: \"card-title\",\n                      children: productGroupLanguage.productGroupName\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 93,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                      className: \"card-description\",\n                      children: productGroupLanguage.productGroupDescription\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 94,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 92,\n                    columnNumber: 49\n                  }, this) : null\n                }, void 0, false)), /*#__PURE__*/_jsxDEV(Card.Text, {\n                  className: \"card-description\",\n                  children: [\"Price: \", productGroup.basePrice + productGroup.vat]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outline-dark\",\n                  block: true,\n                  children: \"Go somewhere\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 33\n            }, this))\n          }, void 0, false))\n        }, void 0, false) : null\n      }, void 0, false))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ProductList;","map":{"version":3,"sources":["/Users/thori/IdeaProjects/2020_Stormrider_Docker_Test/stormrider_2020/frontend/src/components/ProductList.js"],"names":["React","bridle","horseshoes","saddle1","saddle2","axios","CardColumns","Card","Button","Jumbotron","ProductList","Component","getCategoryId","categoryId","props","match","params","getLanguage","language","getImage","link","constructor","state","categories","componentDidMount","get","then","response","data","setState","render","map","category","subcategories","subcategory","productGroups","productGroup","width","height","productGroupImage","image","productGroupLanguages","productGroupLanguage","appLanguageCode","productGroupName","productGroupDescription","basePrice","vat"],"mappings":"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","sourcesContent":["import React from 'react';\nimport bridle from '../images/products/bridle.png'\nimport horseshoes from '../images/products/horseshoes.jpg'\nimport saddle1 from '../images/products/saddle1.png'\nimport saddle2 from '../images/products/saddle2.jpg'\n\nimport axios from 'axios';\nimport {CardColumns, Card, Button, Jumbotron} from \"react-bootstrap\";\n\n\n//  DECLARATION OF GLOBAL LANGUAGE VARIABLE\n//============================================\n\nclass ProductList extends React.Component {\n\n//  METHODS FOR RETRIEVING VALUES FROM PATH\n//=====================================================================================================================\n\n    getCategoryId() {\n        const categoryId = this.props.match.params.categoryId;\n        return categoryId;\n    }\n\n    getLanguage() {\n        const language = this.props.match.params.language;\n        return language;\n    }\n\n    getImage(link) {\n        switch(link) {\n            case 'bridle.png':\n                return bridle;\n                break;\n            case 'horseshoes.jpg':\n                return horseshoes;\n                break;\n            case 'saddle1.png':\n                return saddle1;\n                break;\n            case 'saddle2.jpg':\n                return saddle2;\n                break;\n            default:\n                break;\n        }\n    }\n\n//  CONSTRUCTOR\n//=====================================================================================================================\n\n    constructor(props) {\n        super(props);\n        this.state = {categories: []};\n    }\n\n//  GET REQUEST\n//=====================================================================================================================\n\n    componentDidMount() {\n        axios.get(\"http://localhost:8888/api/category/all\") // the ID needs to be passed from NavBar\n            .then(response => response.data)\n            .then((data) => {\n                this.setState({categories : data});\n            })\n    }\n\n//  RENDER METHODS\n//=====================================================================================================================\n\n    render() {\n        return (\n            <CardColumns className=\"card-frame\">\n            {\n                this.state.categories.map((category) =>\n                <>\n                {\n                    (category.categoryId == this.getCategoryId()) ?\n                    <>\n                    {\n                        category.subcategories.map((subcategory) =>\n                        <>\n                        {\n                            subcategory.productGroups.map((productGroup) =>\n                                <Card style={{width: '18rem'}}>\n                                    <Card.Img variant=\"top\" style={{height: '20rem'}} src={this.getImage(productGroup.productGroupImage.image)}/>\n                                    <Card.Body>\n                                        {\n                                            productGroup.productGroupLanguages.map((productGroupLanguage) =>\n                                        <>\n                                        {\n                                            (productGroupLanguage.appLanguageCode == this.getLanguage()) ?\n                                                <div>\n                                                    <Card.Text className=\"card-title\">{productGroupLanguage.productGroupName}</Card.Text>\n                                                    <Card.Text className=\"card-description\">{productGroupLanguage.productGroupDescription}</Card.Text>\n                                                </div>\n                                                :\n                                                null\n                                        }\n                                        </>\n                                            )\n                                        }\n                                        <Card.Text className=\"card-description\">Price: {productGroup.basePrice + productGroup.vat}</Card.Text>\n                                        <Button variant=\"outline-dark\" block>Go somewhere</Button>\n                                    </Card.Body>\n                                </Card>\n                            )\n                        }\n                        </>\n                        )\n                    }\n                    </>\n                    :\n                    null\n                }\n                </>\n                )\n            }\n            </CardColumns>\n        );\n    }\n\n}\n\nexport default ProductList;"]},"metadata":{},"sourceType":"module"}